import Head from "next/head";

import { AskFormBoard } from "@/components/AskFormBoard";
import { DummyTextAskForm } from "@/components/DummyAskForm/TextAskForm";
import { PickedAskFormBoard } from "@/components/PickedAskFormBoard";
import { DraggableItem } from "@/components/DraggableItem";
import { useDraggable } from "@/hooks/useDraggable";
import { useState } from "react";
import { TextAskFormType } from "./index.types";
import { TextAskForm } from "@/components/AskForm/TextAskForm";

export default function Home() {
  const [선택된질문리스트, set선택된질문리스트] = useState<TextAskFormType[]>(
    []
  );

  console.log(선택된질문리스트);

  const 질문추가 = () => {
    const newId = Math.max(
      0,
      ...선택된질문리스트.map((질문) => Number.parseInt(질문.id))
    );
    set선택된질문리스트((prev) => [
      ...prev,
      { id: "" + (newId + 1), type: "text", askTitle: "" },
    ]);
  };

  const { onMouseDownHandler } = useDraggable(질문추가);

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ display: "flex", gap: "10px" }}>
        <AskFormBoard>
          <DraggableItem onMouseDown={onMouseDownHandler}>
            <DummyTextAskForm />
          </DraggableItem>
        </AskFormBoard>
        <PickedAskFormBoard>
          {선택된질문리스트.map((질문, index) => (
            <DraggableItem
              key={질문.id}
              className="draggable-item"
              data-index={index}
              onMouseDown={(mouseDownEvent: React.MouseEvent) => {
                let currentSourceItem: HTMLElement | undefined | null;
                let currentDestinationItem: HTMLElement | undefined | null;
                let currentSourceIndex: number;
                let currentDestinationIndex: number;

                const 이동할질문폼 = (
                  mouseDownEvent.target as HTMLElement
                ).closest<HTMLElement>(".draggable-item");

                if (!이동할질문폼) return;

                const 이동할질문폼Pos = 이동할질문폼.getBoundingClientRect();

                const 이동할질문폼복사본 = 이동할질문폼.cloneNode(
                  true
                ) as HTMLElement;

                이동할질문폼복사본.style.position = "fixed";
                이동할질문폼복사본.style.top = `${이동할질문폼Pos.top}px`;
                이동할질문폼복사본.style.left = `${이동할질문폼Pos.left}px`;
                이동할질문폼복사본.style.width = `${이동할질문폼Pos.width}px`;
                이동할질문폼복사본.style.height = `${이동할질문폼Pos.height}px`;
                이동할질문폼복사본.style.pointerEvents = "none";

                이동할질문폼복사본.style.border = "2px solid rgb(96 165 250)";
                이동할질문폼복사본.style.opacity = "0.95";
                이동할질문폼복사본.style.boxShadow =
                  "0 30px 60px rgba(0, 0, 0, .2)";
                이동할질문폼복사본.style.transform = "scale(1.05)";
                이동할질문폼복사본.style.transition =
                  "transform 200ms ease, opacity 200ms ease, boxShadow 200ms ease";

                이동할질문폼.style.opacity = "0.5";
                이동할질문폼.style.cursor = "grabbing";

                document.body.style.cursor = "grabbing";
                document.body.appendChild(이동할질문폼복사본);

                const onMouseMoveHandler = (mouseMoveEvent: MouseEvent) => {
                  const dX = mouseMoveEvent.pageX - mouseDownEvent.pageX;
                  const dY = mouseMoveEvent.pageY - mouseDownEvent.pageY;

                  이동할질문폼복사본.style.top = `${
                    이동할질문폼Pos.top + dY
                  }px`;
                  이동할질문폼복사본.style.left = `${
                    이동할질문폼Pos.left + dX
                  }px`;

                  const 이동할질문폼복사본Pos =
                    이동할질문폼복사본.getBoundingClientRect();

                  currentDestinationItem = document
                    .elementFromPoint(
                      이동할질문폼복사본Pos.left +
                        이동할질문폼복사본Pos.width / 2,
                      이동할질문폼복사본Pos.top +
                        이동할질문폼복사본Pos.height / 2
                    )
                    ?.closest<HTMLElement>(".draggable-item");
                  currentDestinationIndex = Number(
                    currentDestinationItem?.dataset.index
                  );

                  currentSourceItem = 이동할질문폼;
                  currentSourceIndex = Number(currentSourceItem.dataset.index);

                  if (currentDestinationItem?.isSameNode(currentSourceItem))
                    return;
                };

                const onMouseUpHandler = () => {
                  document.body.removeAttribute("style");

                  const 이동할질문폼Pos = 이동할질문폼.getBoundingClientRect();
                  이동할질문폼복사본.style.left = `${이동할질문폼Pos.left}px`;
                  이동할질문폼복사본.style.top = `${이동할질문폼Pos.top}px`;
                  이동할질문폼복사본.style.opacity = "1";
                  이동할질문폼복사본.style.transform = "none";
                  이동할질문폼복사본.style.borderWidth = "0px";
                  이동할질문폼복사본.style.boxShadow =
                    "0 1px 3px rgba(0, 0, 0, 0.15)";
                  이동할질문폼복사본.style.transition = "all 200ms ease";

                  이동할질문폼복사본.addEventListener(
                    "transitionend",
                    () => {
                      이동할질문폼.removeAttribute("style");
                      document.body.removeAttribute("style");
                      이동할질문폼복사본.remove();

                      if (currentDestinationItem) {
                        const copied질문리스트 = [...선택된질문리스트];
                        const moving질문 = copied질문리스트[currentSourceIndex];
                        copied질문리스트.splice(currentSourceIndex, 1);
                        copied질문리스트.splice(
                          currentDestinationIndex,
                          0,
                          moving질문
                        );
                        set선택된질문리스트(copied질문리스트);
                      }
                    },
                    { once: true }
                  );

                  document.removeEventListener("mousemove", onMouseMoveHandler);
                };

                document.addEventListener("mousemove", onMouseMoveHandler);
                document.addEventListener("mouseup", onMouseUpHandler, {
                  once: true,
                });
              }}
              요소삭제={() => {
                const 삭제된질문 = [...선택된질문리스트];
                삭제된질문.splice(index, 1);
                set선택된질문리스트(삭제된질문);
              }}
            >
              <TextAskForm
                index={index}
                질문={질문}
                질문제목수정={(event: React.ChangeEvent<HTMLInputElement>) => {
                  const 수정한제목 = event.target.value;
                  set선택된질문리스트((prev) =>
                    prev.map((item) =>
                      item.id === 질문.id
                        ? { ...item, askTitle: 수정한제목 }
                        : { ...item }
                    )
                  );
                }}
              />
            </DraggableItem>
          ))}
        </PickedAskFormBoard>
      </main>
    </>
  );
}
